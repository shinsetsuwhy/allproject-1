import os
import re
from pathlib import Path
from typing import Dict, List, Optional, Tuple

class ProjectMetricsAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.metrics = {
            'project_info': {},
            'team_members': {},
            'project_status': '–°—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            'tasks': {'in_progress': [], 'completed': [], 'upcoming': []}
        }
        self.valid_paths = [
            r"C:\Users\mtosk\Desktop\—Ä–µ–ø–∫–∏\artemproject\allproject-1\README.md",
            "README.md",
            "./README.md"
        ]
    
    def load_metrics(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        for path in self.valid_paths:
            try:
                if os.path.exists(path):
                    print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {path}")
                    with open(path, 'r', encoding='utf-8') as file:
                        content = file.read()
                    return self._parse_content(content)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {path}: {e}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ—Ç—Ä–∏–∫")
        return False
    
    def _parse_content(self, content: str) -> bool:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ README.md"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
            self._extract_project_info(content)
            
            # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
            self._extract_team_members(content)
            
            # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
            self._extract_project_status(content)
            
            # –ó–∞–¥–∞—á–∏
            self._extract_tasks(content)
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return False
    
    def _extract_project_info(self, content: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        patterns = {
            'educational_institution': r'-\s*\*\*–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:\*\*\s*(.+)',
            'discipline': r'-\s*\*\*–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:\*\*\s*(.+)',
            'group': r'-\s*\*\*–ì—Ä—É–ø–ø–∞:\*\*\s*(.+)',
            'creation_date': r'-\s*\*\*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:\*\*\s*(.+)'
        }
        
        for key, pattern in patterns.items():
            match = re.search(pattern, content)
            if match:
                self.metrics['project_info'][key] = match.group(1).strip()
    
    def _extract_team_members(self, content: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
        team_section = re.search(
            r'## –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞\s*\n(.*?)(?=\n##|\n#|$)',
            content,
            re.DOTALL
        )
        
        if team_section:
            lines = team_section.group(1).strip().split('\n')
            for line in lines[2:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                if '|' in line and not line.startswith('|-'):
                    parts = [part.strip() for part in line.split('|') if part.strip()]
                    if len(parts) >= 2:
                        role = re.sub(r'\*\*', '', parts[0]).strip()
                        name = parts[1].strip()
                        self.metrics['team_members'][name] = role
    
    def _extract_project_status(self, content: str):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        status_checkboxes = re.findall(
            r'- \[(.)\] (–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏|–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ|–ó–∞–≤–µ—Ä—à–µ–Ω)',
            content
        )
        
        for marker, status in status_checkboxes:
            if marker.lower() == 'x':
                self.metrics['project_status'] = status
                break
    
    def _extract_tasks(self, content: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö"""
        task_sections = re.findall(
            r'### (–ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ|–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏|–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏)\s*\n(.*?)(?=\n###|\n##|$)',
            content,
            re.DOTALL
        )
        
        section_mapping = {
            '–ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ': 'in_progress',
            '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏': 'completed', 
            '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏': 'upcoming'
        }
        
        for section_name, tasks_content in task_sections:
            section_key = section_mapping.get(section_name)
            if section_key:
                tasks = re.findall(r'- \[.\] (.+)', tasks_content)
                self.metrics['tasks'][section_key] = [task.strip() for task in tasks if task.strip()]
    
    def find_user(self, search_name: str) -> Tuple[Optional[str], Optional[str]]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        search_name = search_name.lower().strip()
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for name, role in self.metrics['team_members'].items():
            if search_name == name.lower():
                return name, role
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ñ–∞–º–∏–ª–∏–∏/–∏–º–µ–Ω–∏
        for name, role in self.metrics['team_members'].items():
            name_lower = name.lower()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏–ª–∏ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            if (search_name in name_lower or
                any(part in name_lower for part in search_name.split()) or
                any(name_part in search_name for name_part in name_lower.split())):
                return name, role
        
        return None, None
    
    def get_user_greeting(self, name: str) -> Dict:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        full_name, role = self.find_user(name)
        
        if not full_name:
            return {
                'success': False,
                'message': f"–ü—Ä–∏–≤–µ—Ç, {name}! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.",
                'available_names': list(self.metrics['team_members'].keys())
            }
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º
        role_greetings = {
            '–¢–∏–º–ª–∏–¥ –ø—Ä–æ–µ–∫—Ç–∞': f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {full_name}! üéØ –ö–∞–∫ —Ç–∏–º–ª–∏–¥ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã.",
            '–£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞': f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}! üë®‚Äçüíª –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ - –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è —É—Å–ø–µ—Ö–∞.",
            '–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞': f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}! üìä –ö–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ feedback –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω—ã."
        }
        
        greeting = role_greetings.get(role, f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –ø—Ä–æ–µ–∫—Ç–µ.")
        
        return {
            'success': True,
            'name': full_name,
            'role': role,
            'greeting': greeting,
            'project_status': self.metrics['project_status'],
            'project_info': self.metrics['project_info']
        }


class MetricsGreeter:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º"""
    
    def __init__(self):
        self.analyzer = ProjectMetricsAnalyzer()
    
    def display_welcome(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print("\n" + "="*60)
        print("üéâ –°–ò–°–¢–ï–ú–ê –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø –ü–û –ú–ï–¢–†–ò–ö–ê–ú –ü–†–û–ï–ö–¢–ê")
        print("="*60)
    
    def display_user_metrics(self, user_data: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_data['success']:
            print(f"\n‚ùå {user_data['message']}")
            if user_data.get('available_names'):
                print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
                for name in user_data['available_names']:
                    print(f"   ‚Ä¢ {name}")
            return
        
        print("\n" + "="*60)
        print(f"üë§ –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –î–õ–Ø: {user_data['name']}")
        print("="*60)
        print(f"üí¨ {user_data['greeting']}")
        print(f"üé≠ –†–æ–ª—å: {user_data['role']}")
        print(f"üìà –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞: {user_data['project_status']}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        if user_data['project_info']:
            print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:")
            for key, value in user_data['project_info'].items():
                readable_key = key.replace('_', ' ').title()
                print(f"   ‚Ä¢ {readable_key}: {value}")
        
        print("="*60)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        if not self.analyzer.load_metrics():
            return
        
        self.display_welcome()
        
        while True:
            print(f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {', '.join(self.analyzer.metrics['team_members'].keys())}")
            print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é/–∏–º—è")
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            
            user_input = input("\nüéØ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip()
            
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ!")
                break
            
            if not user_input:
                print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è")
                continue
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            user_metrics = self.analyzer.get_user_greeting(user_input)
            self.display_user_metrics(user_metrics)
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            if user_metrics['success']:
                continue_input = input("\nüîÑ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è? (–¥–∞/–Ω–µ—Ç): ").lower()
                if continue_input not in ['–¥–∞', '–¥', 'yes', 'y', '']:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ!")
                    break


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        greeter = MetricsGreeter()
        greeter.run()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()